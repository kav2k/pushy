/* Command objects */

object NotificationCommand "pushy-host-notification" {
  command = [ "$script$" ]

  arguments = {
    "--user" = {
      value = "$user.vars.pushover_key$"
    }
    "--timestamp" = {
      value = "$icinga.timet$"
    }
    "--title" = {
      value = "$notification.type$: $host.display_name$ is $host.state$"
    }
    "--message" = {
      value = {{
        var message = "Notification: $notification.type$\n";
        message += "Host: $host.display_name$\n";
        message += "State: $host.state$\n";
        message += "Address: $address$\n";
        if (macro("$notification.comment$")) { message += "Comment: [$notification.author$] $notification.comment$"; }
        message += "Info: $host.output$";
        return macro(message);
      }}
    }
  }

  vars.script = {{ if(user.vars.pushover_key) { return "/usr/local/bin/pushy" } else { return "/bin/true" } }}
}

object NotificationCommand "pushy-service-notification" {
  command = [ "$script$" ]

  arguments = {
    "--user" = {
      value = "$user.vars.pushover_key$"
    }
    "--timestamp" = {
      value = "$icinga.timet$"
    }
    "--title" = {
      value = "$notification.type$: $service.display_name$/$host.display_name$ is $service.state$"
    }
    "--message" = {
      value = {{
        var message = "Notification: $notification.type$\n";
        message += "Service: $service.display_name$\n";
        message += "Host: $host.display_name$\n";
        message += "Address: $address$\n";
        message += "State: $service.state$\n";
        if (macro("$notification.comment$")) { message += "Comment: [$notification.author$] $notification.comment$\n"; }
        message += "Info: $service.output$";
        return macro(message);
      }}
    }
  }

  vars.script = {{ if(user.vars.pushover_key) { return "/usr/local/bin/pushy" } else { return "/bin/true" } }}
}

/* Notification templates */

template Notification "pushy-host-notification" {
  command = "pushy-host-notification"

  states = [ Up, Down ]
  types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}

template Notification "pushy-service-notification" {
  command = "pushy-service-notification"

  states = [ OK, Warning, Critical ]
  types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}

template Notification "pushy-service-notification-critical" {
  command = "pushy-service-notification"

  states = [ OK, Critical ]
  types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}

/* Notifications */

apply Notification "pushy-icingaadmin" to Host {
  import "pushy-host-notification"

  user_groups = host.vars.notification.pushy.groups
  users = host.vars.notification.pushy.users

  assign where host.vars.notification.pushy
}

apply Notification "pushy-icingaadmin" to Service {
  import "pushy-service-notification"

  user_groups = host.vars.notification.pushy.groups
  users = host.vars.notification.pushy.users

  assign where (host.vars.notification.pushy && !host.vars.notification.pushy.critical_only)
}

apply Notification "pushy-icingaadmin" to Service {
  import "pushy-service-notification-critical"

  user_groups = host.vars.notification.pushy.groups
  users = host.vars.notification.pushy.users

  assign where (host.vars.notification.pushy && host.vars.notification.pushy.critical_only)
}

/* User example */

/*
object User "user" {
  import "generic-user"

  display_name = "John Smith"
  groups = [ "example-admins" ]

  email = "admin@example.com"

  vars.pushover_key = "mTocvksTl58s566KPfur677FDgmt95"
}
*/

/* Host template example */

/*
template Host "example-host" {
  import "generic-host"
  groups += [ "example-servers" ]

  vars.notification.mail.groups += [ "example-admins" ]
  vars.notification.pushy.groups += [ "example-admins" ]
}
*/
