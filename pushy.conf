/* Command objects */

object NotificationCommand "pushy-host-notification" {
  command = [ "$script$" ]

  arguments = {
    "--user" = {
      value = "$user.vars.pushover_key$"
    }
    "--timestamp" = {
      value = "$icinga.timet$"
    }
    "--title" = {
      value = "$notification.type$: $host.display_name$ is $host.state$"
    }
    "--message" = {
      value = "Notification Type: $notification.type$\nHost: $host.display_name$\nState: $host.state$\nAddress: $address$\nInfo: $host.output$"
    }
  }

  vars.script = {{ if(user.vars.pushover_key) { return "/usr/local/bin/pushy" } else { return "/bin/true" } }}
}

object NotificationCommand "pushy-service-notification" {
  command = [ "$script$" ]

  arguments = {
    "--user" = {
      value = "$user.vars.pushover_key$"
    }
    "--timestamp" = {
      value = "$icinga.timet$"
    }
    "--title" = {
      value = "$notification.type$: $service.display_name$/$host.display_name$ is $service.state$"
    }
    "--message" = {
      value = "Notification Type: $notification.type$\nService: $service.display_name$\nHost: $host.display_name$\nAddress: $address$\nState: $service.state$\nAdditional Info:\n$service.output$"
    }
  }

  vars.script = {{ if(user.vars.pushover_key) { return "/usr/local/bin/pushy" } else { return "/bin/true" } }}
}

/* Notification templates */

template Notification "pushy-host-notification" {
  command = "pushy-host-notification"

  states = [ Up, Down ]
  types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}

template Notification "pushy-service-notification" {
  command = "pushy-service-notification"

  states = [ OK, Warning, Critical, Unknown ]
  types = [ Problem, Acknowledgement, Recovery, Custom,
            FlappingStart, FlappingEnd,
            DowntimeStart, DowntimeEnd, DowntimeRemoved ]

  period = "24x7"
}

/* Notifications */

apply Notification "pushy-icingaadmin" to Host {
  import "pushy-host-notification"

  user_groups = host.vars.notification.pushy.groups
  users = host.vars.notification.pushy.users

  assign where host.vars.notification.pushy
}

apply Notification "pushy-icingaadmin" to Service {
  import "pushy-service-notification"

  user_groups = host.vars.notification.pushy.groups
  users = host.vars.notification.pushy.users

  assign where host.vars.notification.pushy
}
